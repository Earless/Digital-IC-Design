;
; Library Name: GSLE
; Attached File Name: editLayer.def
; Format: list(layer_name layer_purpose) edit

if( !(libId = dmFindLib("GSLE")) return(nil))
leSetLayerPanel(libId list("ptap" "drawing") nil)
leSetLayerPanel(libId list("ntap" "drawing") nil)
leSetLayerPanel(libId list("ptap" "net") nil)
leSetLayerPanel(libId list("ntap" "net") nil)
leSetLayerPanel(libId list("align" "drawing") nil)
leSetLayerPanel(libId list("metal1Res" "drawing") nil)
leSetLayerPanel(libId list("intext" "drawing") t)
leSetLayerPanel(libId list("cellBoundary" "boundary") nil)
leSetLayerPanel(libId list("cellBoundary" "drawing") nil)
leSetLayerPanel(libId list("pwell" "net") nil)
leSetLayerPanel(libId list("pwell" "drawing") t)
leSetLayerPanel(libId list("pimplant" "drawing") t)
leSetLayerPanel(libId list("diff" "drawing") nil)
leSetLayerPanel(libId list("poly1" "drawing") t)
leSetLayerPanel(libId list("poly1" "net") nil)
leSetLayerPanel(libId list("cont" "drawing") t)
leSetLayerPanel(libId list("cont" "net") nil)
leSetLayerPanel(libId list("metal1" "drawing") t)
leSetLayerPanel(libId list("metal1" "net") nil)
leSetLayerPanel(libId list("via" "drawing") t)
leSetLayerPanel(libId list("metal2" "drawing") t)
leSetLayerPanel(libId list("vapox" "drawing") t)
leSetLayerPanel(libId list("ndiff" "drawing") t)
leSetLayerPanel(libId list("ndiff" "net") nil)
leSetLayerPanel(libId list("pdiff" "drawing") t)
leSetLayerPanel(libId list("pdiff" "net") nil)
leSetLayerPanel(libId list("nwell" "drawing") t)
leSetLayerPanel(libId list("nwell" "net") nil)
leSetLayerPanel(libId list("poly2" "drawing") nil)
leSetLayerPanel(libId list("nimplant" "drawing") nil)
leSetLayerPanel(libId list("buried" "drawing") t)
leSetLayerPanel(libId list("isolation" "drawing") t)
leSetLayerPanel(libId list("padtext" "drawing") t)
leSetLayerPanel(libId list("pad" "drawing") nil)
